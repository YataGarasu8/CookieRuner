
 1. INTRODUCTION - 게임 소개
"안녕하세요, 저희는 팀 마개조입니다.
저희가 개발한 게임은 쿠키런 - 오븐브레이크를 모티브로 한 러닝 장르 게임입니다.  

게임 소개입니다.
Unity와 C을 사용하여 개발하였으며, PC(Unity 에디터)와 Android에서 실행할 수 있습니다.  

이 게임의 핵심적인 특징은 다음과 같습니다.  
첫째, 자동 달리기와 점프/슬라이드 조작을 지원하여 누구나 쉽게 플레이할 수 있습니다.  
둘째, 지속적인 맵 생성을 통해 무한히 달릴 수 있는 구조를 구현했습니다.  
셋째, 장애물의 등장 패턴을 조정하여 난이도를 조절할 수 있도록 했습니다.  
마지막으로, Unity Gaming Services(UGS)를 활용한 온라인 기능을 추가하여,  
플레이어 인증, 데이터 저장, 랭킹 시스템까지 지원하고 있습니다."

------------------------------------------------------------------------------

 2. DEMONSTRATION - 게임 시연
"이제 게임 시연을 보여드리겠습니다.  
먼저 플레이어의 이동과 점프/슬라이드 조작을 확인할 수 있습니다.  
플레이어는 자동으로 달리며, 장애물을 피하기 위해 점프하거나 슬라이드를 사용해야 합니다.  

다음으로, 맵 자동 생성 기능입니다.  
플레이어가 이동하는 동안 새로운 맵이 지속적으로 생성되며,  
이전 맵은 자동으로 삭제되어 최적화된 게임 환경을 제공합니다.  

또한, 장애물과 충돌 시 체력이 감소하는 모습을 볼 수 있습니다.  
게임 진행 중 아이템을 획득하면 다양한 효과가 적용됩니다.  

마지막으로, UGS 연동 기능입니다.  
게임 종료 후 신기록이 갱신되면, 랭킹에 자동으로 반영됩니다.  
이제 실제 게임 화면을 통해 자세히 보여드리겠습니다."

------------------------------------------------------------------------------

 3. CORE FEATURES (핵심 기능 - 6가지 요소별 설명)

 (1) 맵 자동 생성 및 삭제
"이 게임에서는 무한 달리기(Endless Runner) 방식을 구현하기 위해  
맵을 자동으로 생성하고 이전 맵을 삭제하는 시스템을 도입했습니다.  

플레이어가 일정 거리를 이동하면 새로운 맵이 자동으로 생성되며,  
이전 맵은 삭제되어 불필요한 메모리 사용을 방지합니다.  

이 과정은 최적화를 고려하여 플레이어의 시야에서 보이지 않는 맵은 제거하는 방식으로 이루어집니다.  
이를 통해 게임의 퍼포먼스를 향상시키고, 원활한 플레이 환경을 제공합니다."


 (2) Parallax 배경 효과
"게임의 몰입도를 높이고, 입체적인 느낌을 주기 위해  
Parallax(패럴랙스) 배경 효과를 적용했습니다.  

이 효과는 배경의 여러 레이어를 서로 다른 속도로 이동시키는 기법으로,  
실제로 깊이감을 느낄 수 있도록 합니다.  

예를 들어, 뒤쪽 배경은 느리게 움직이고, 앞쪽 배경은 빠르게 움직이도록 설정했습니다.  
이로 인해 플레이어가 이동할 때 더 역동적인 환경을 경험할 수 있습니다.  

특히, 배경을 Vector 이미지로 구현하여  
해상도에 영향을 받지 않고 부드러운 움직임을 유지할 수 있도록 했습니다."


 (3) 정밀한 충돌 판정 시스템
"플레이어와 장애물 간의 정확한 충돌 판정을 위해  
2가지 충돌체(Collision System)를 적용했습니다.  

첫 번째는 바닥 충돌체(Ground Collider)입니다.  
- 플레이어가 지면 위에 있는지를 판별하여 점프나 슬라이드 동작을 자연스럽게 수행할 수 있도록 합니다.  

두 번째는 장애물 충돌체(Obstacle Collider)입니다.  
- Polygon Collider 2D를 사용하여 보다 정밀한 충돌 판정을 구현했습니다.  
- 단순한 사각형(BoxCollider2D)이 아닌, 장애물 모양 그대로 충돌 영역을 설정하여  
  현실적인 충돌 감지를 가능하게 했습니다.  

또한, 플레이어가 충돌했을 때  
무적 상태일 경우에는 밀려나는 효과를 추가하여 자연스러운 게임 흐름을 유지하도록 했습니다."


 (4) 플레이어 데이터 및 랭킹 관리 (UGS 연동)
"플레이어의 데이터를 안정적으로 저장하고 불러오기 위해  
Unity Gaming Services(UGS)와 연동하였습니다.  

UGS를 활용하여 다음과 같은 기능을 구현했습니다.  
- 플레이어 인증 시스템:  
  - 로그인 시 고유 토큰을 발급받아 인증하고,  
    개인 데이터가 안전하게 저장될 수 있도록 했습니다.  

- 데이터 저장 및 불러오기:  
  - 게임 종료 후 점수와 기록을 자동으로 저장하며,  
    다시 접속하면 데이터를 불러올 수 있습니다.  

- 랭킹 시스템:  
  - 실시간으로 점수를 기록하고, 높은 점수 순으로 자동 정렬됩니다.  
  - 버킷 및 티어 시스템 없이, 누적 점수 기반의 순위 책정 방식을 사용하여  
    모든 플레이어가 동일한 랭킹을 볼 수 있도록 했습니다."


 (5) 멀티스레딩을 활용한 최적화 (비동기 처리)
"게임의 성능을 향상시키기 위해  
멀티스레딩을 활용하여 리소스 로딩을 구현했습니다.  

System.Threading의 스레드 풀을 활용하여 병렬로 처리되며,  
이를 통해 메인 스레드가 블로킹되지 않도록 하여 응답성에 문제가 없도록 했습니다.

또한, Thread-Safe한 자료구조(ConcurrentQueue)를 사용하여  
멀티스레드 환경에서도 데이터의 안정성을 유지할 수 있도록 했습니다.  


 (6) Prefab to Palette 시스템
"게임 내 장애물과 오브젝트를 보다 효율적으로 배치하기 위해,  
Prefab to Palette 기능을 적용했습니다.

이 기능은 Prefab을 ScriptableObject와 Tile Palette에 등록하여,  
Tilemap을 활용한 오브젝트 배치가 가능하도록 만든 시스템입니다.  

Prefab to Palette 기능의 주요 특징은 다음과 같습니다.  
1. Prefab을 ScriptableObject에 등록하여 관리  
2. Tile Palette에 등록된 오브젝트를 드래그 앤 드롭 방식으로 배치 가능  
3. Tilemap을 활용하여 장애물을 자동 배치  

이 기능을 통해 씬(Scene)에서 직접 배치하는 번거로움을 줄이고,  
오브젝트를 보다 체계적으로 관리할 수 있습니다."

------------------------------------------------------------------------------

 4. TROUBLESHOOTING - 문제 해결 과정
개발 과정에서 생긴 여러 가지 기술적 문제에 대해서 소개드립니다. 

첫 번째 문제는 Git에서 유니코드(UTF-8) 깨짐 현상이었습니다.  
이 문제는 Git의 인코딩 설정이 제대로 되어 있지 않아서 발생했으며,  
전역 설정을 UTF-8로 변경하여 해결할 수 있었습니다.  

두 번째는 게임 일시정지 후 씬 전환 시 애니메이션이 멈추는 문제였습니다.  
이는 Time.timeScale을 0으로 설정한 후 씬을 변경할 때 발생했으며,  
씬 전환 전에 Time.timeScale을 1로 초기화하는 방식으로 해결했습니다.  

세 번째는 장애물 충돌체 설정 문제였습니다.  
처음에는 BoxCollider2D를 사용했지만, 충돌 판정이 정확하지 않아  
PolygonCollider2D로 변경한 후 정상적으로 동작하는 것을 확인했습니다.  

네 번째는 움직이는 장애물 생성 문제입니다.  
일부 장애물이 정상적으로 작동하지 않았으며,  
Animator의 Transition 조건이 누락되어 있음을 발견했습니다.  
이후, Animator에 적절한 변수를 추가하고 Condition을 설정하여 문제를 해결했습니다.  

다섯 번째는 해상도에 따른 UI 깨짐 현상이었습니다.  
Canvas의 Scale Mode를 Constant Pixel Size로 설정하면  
다른 해상도에서 UI 비율이 깨지는 문제가 발생했습니다.  
이를 해결하기 위해 Scale With Screen Size 옵션을 사용하여  
어떤 화면에서도 동일한 비율로 UI가 유지되도록 했습니다.  

마지막으로, 물리 연산 및 트리거 호출 문제입니다.  
Update에서 Rigidbody 관련 코드를 실행하면 Unity의 물리 연산 주기와 맞지 않아  
애니메이션이 정상적으로 전환되지 않는 문제가 발생했습니다.  
이를 해결하기 위해 모든 물리 연산과 트리거 호출을 FixedUpdate에서 처리하도록 변경했습니다.

------------------------------------------------------------------------------

 5. CONCLUSION - 마무리
"지금까지 저희 쿠키 러너 게임의 핵심 기능과 문제 해결 과정을 소개해 드렸습니다.  
이 게임을 개발하면서 맵 자동 생성, Parallax 배경 효과, 정밀한 충돌 판정,  
UGS를 활용한 데이터 및 랭킹 관리 등 다양한 기술을 적용했습니다.  

또한, 개발 과정에서 여러 가지 기술적 문제를 해결하며  
게임의 완성도를 높이기 위해 노력했습니다.  

마지막으로, 저희 팀 마개조(9조) 팀원들 모두 최선을 다해 개발에 임했으며,  
지금까지 발표를 들어주셔서 감사합니다."

